# SPDX-FileCopyrightText: 2017 Scott Shawcroft, written for Adafruit Industries
# SPDX-FileCopyrightText: Copyright (c) 2023 Jerico Tenmatay
#
# SPDX-License-Identifier: MIT
"""
`pmw3389`
================================================================================

CircuitPython library for the PMW3389 motion sensor.
Port of Arduino PMW3389 Module Library by SunjunKim

* Author(s): Jerico Tenmatay

Implementation Notes
--------------------

**Hardware:**

* PMW3389

**Software and Dependencies:**

* Adafruit CircuitPython firmware for the supported boards:
  https://circuitpython.org/downloads

* Adafruit's Bus Device library: https://github.com/adafruit/Adafruit_CircuitPython_BusDevice

"""

# imports
import time
import board
import busio
import micropython
from digitalio import DigitalInOut, Direction, Pull
from adafruit_bus_device.spi_device import SPIDevice

__version__ = "0.0.0-auto.0"
__repo__ = "https://github.com/whimsee/CircuitPython_PMW3360.git"


_PMW3389_CPI_STEP = cont(50)
_PMW3389_CPI_MIN = const(50)
_PMW3389_CPI_MAX = const(16000)


"""
changed register from PMW3360 -> PMW3389 (s. QMK)

renames:
  REG_Raw_Data_Sum -> REG_RawData_Sum
  REG_Maximum_Raw_data -> REG_Maximum_RawData
  REG_Minimum_Raw_data -> REG_Minimum_RawData
  REG_Control -> REG_Ripple_Control
  REG_Raw_Data_Threshold -> REG_RawData_Threshold
  REG_Raw_Data_Burst -> REG_RawData_Burst
  REG_LiftCutoff_Tune3 -> REG_LiftCutoff_Cal3
  REG_LiftCutoff_Tune1 -> REG_LiftCutoff_Cal1
  REG_LiftCutoff_Tune2 -> REG_LiftCutoff_Cal2

changes:
- #define REG_Config1                    0x0f
+ #define REG_Resolution_L               0x0e
+ #define REG_Resolution_H               0x0f

- #define REG_Raw_Data_Dump              0x29

+ #define REG_Control2                   0x2d

- #define REG_Config5                    0x2f
+ #define REG_Config5_L                  0x2e
+ #define REG_Config5_H                  0x2f

- #define REG_LiftCutoff_Tune_Timeout    0x58
+ #define REG_LiftCutoff_Cal_Timeout     0x71

- #define REG_LiftCutoff_Tune_Min_Length 0x5a
+ #define REG_LiftCutoff_Cal_Min_Length  0x72

+ #define REG_PWM_Period_Cnt             0x73
+ #define REG_PWM_Width_Cnt              0x74
"""
_REG_Product_ID = const(0x00)
_REG_Revision_ID = const(0x01)
_REG_Motion = const(0x02)
_REG_Delta_X_L = const(0x03)
_REG_Delta_X_H = const(0x04)
_REG_Delta_Y_L = const(0x05)
_REG_Delta_Y_H = const(0x06)
_REG_SQUAL = const(0x07)
_REG_Raw_Data_Sum = const(0x08)
_REG_Maximum_Raw_data = const(0x09)
_REG_Minimum_Raw_data = const(0x0A)
_REG_Shutter_Lower = const(0x0B)
_REG_Shutter_Upper = const(0x0C)
_REG_Control = const(0x0D)
_REG_Resolution_L = const(0x0E)
_REG_Resolution_H = const(0x0F)
_REG_Config2 = const(0x10)
_REG_Angle_Tune = const(0x11)
_REG_Frame_Capture = const(0x12)
_REG_SROM_Enable = const(0x13)
_REG_Run_Downshift = const(0x14)
_REG_Rest1_Rate_Lower = const(0x15)
_REG_Rest1_Rate_Upper = const(0x16)
_REG_Rest1_Downshift = const(0x17)
_REG_Rest2_Rate_Lower = const(0x18)
_REG_Rest2_Rate_Upper = const(0x19)
_REG_Rest2_Downshift = const(0x1A)
_REG_Rest3_Rate_Lower = const(0x1B)
_REG_Rest3_Rate_Upper = const(0x1C)
_REG_Observation = const(0x24)
_REG_Data_Out_Lower = const(0x25)
_REG_Data_Out_Upper = const(0x26)
_REG_SROM_ID = const(0x2A)
_REG_Min_SQ_Run = const(0x2B)
_REG_Raw_Data_Threshold = const(0x2C)
_REG_Control2 = const(0x2d)
_REG_Config5_L = const(0x2E)
_REG_Config5_H = const(0x2F)
_REG_Power_Up_Reset = const(0x3A)
_REG_Shutdown = const(0x3B)
_REG_Inverse_Product_ID = const(0x3F)
_REG_LiftCutoff_Tune3 = const(0x41)
_REG_Angle_Snap = const(0x42)
_REG_LiftCutoff_Tune1 = const(0x4A)
_REG_Motion_Burst = const(0x50)
_REG_LiftCutoff_Tune_Min_Length = const(0x5A)
_REG_SROM_Load_Burst = const(0x62)
_REG_Lift_Config = const(0x63)
_REG_Raw_Data_Burst = const(0x64)
_REG_LiftCutoff_Tune2 = const(0x65)
_REG_LiftCutoff_Cal_Timeout = const(0x71)
_REG_LiftCutoff_Cal_Min_Length = const(0x72)
_REG_PWM_Period_Cnt = const(0x73)
_REG_PWM_Width_Cnt = const(0x74)


# firmware data broken up to not exhaust the pystack
_FIRMWARE_DATA_1 = (
    b"\x01\xe8\xba\x26\x0b\xb2\xbe\xfe\x7e\x5f\x3c\xdb\x15\xa8\xb3\xe4" 
    b"\x2b\xb5\xe8\x53\x07\x6d\x3b\xd1\x20\xc2\x06\x6f\x3d\xd9\x11\xa0" 
    b"\xc2\xe7\x2d\xb9\xd1\x20\xa3\xa5\xc8\xf3\x64\x4a\xf7\x4d\x18\x93" 
    b"\xa4\xca\xf7\x6c\x5a\x36\xee\x5e\x3e\xfe\x7e\x7e\x5f\x1d\x99\xb0" 
    b"\xc3\xe5\x29\xd3\x03\x65\x48\x12\x87\x6d\x58\x32\xe6\x2f\xdc\x3a" 
    b"\xf2\x4f\xfd\x59\x11\x81\x61\x21\xc0\x02\x86\x8e\x7f\x5d\x38\xf2" 
    b"\x47\x0c\x7b\x55\x28\xb3\xe4\x4a\x16\xab\xbf\xdd\x38\xf2\x66\x4e" 
    b"\xff\x5d\x19\x91\xa0\xa3\xa5\xc8\x12\xa6\xaf\xdc\x3a\xd1\x41\x60" 
    b"\x75\x58\x24\x92\xd4\x72\x6c\xe0\x2f\xfd\x23\x8d\x1c\x5b\xb2\x97" 
    b"\x36\x3d\x0b\xa2\x49\xb1\x58\xf2\x1f\xc0\xcb\xf8\x41\x4f\xcd\x1e" 
    b"\x6b\x39\xa7\x2b\xe9\x30\x16\x83\xd2\x0e\x47\x8f\xe3\xb1\xdf\xa2" 
    b"\x15\xdb\x5d\x30\xc5\x1a\xab\x31\x99\xf3\xfa\xb2\x86\x69\xad\x7a" 
    b"\xe8\xa7\x18\x6a\xcc\xc8\x65\x23\x87\xa8\x5f\xf5\x21\x59\x75\x09" 
    b"\x71\x45\x55\x25\x4b\xda\xa1\xc3\xf7\x41\xab\x59\xd9\x74\x12\x55" 
    b"\x5f\xbc\xaf\xd9\xfd\xb0\x1e\xa3\x0f\xff\xde\x11\x16\x6a\xae\x0e" 
    b"\xe1\x5d\x3c\x10\x43\x9a\xa1\x0b\x24\x8f\x0d\x7f\x0b\x5e\x4c\x42" 
)

_FIRMWARE_DATA_2 = (
    b"\xa4\x84\x2c\x40\xd0\x55\x39\xe6\x4b\xf8\x9b\x2f\xdc\x28\xff\xfa" 
    b"\xb5\x85\x19\xe5\x28\xa1\x77\xaa\x73\xf3\x03\xc7\x62\xa6\x91\x18" 
    b"\xc9\xb0\xcd\x05\xdc\xca\x81\x26\x1a\x47\x40\xda\x36\x7d\x6a\x53" 
    b"\xc8\x5a\x77\x5d\x19\xa4\x1b\x23\x83\xd0\xb2\xaa\x0e\xbf\x77\x4e" 
    b"\x3a\x3b\x59\x00\x31\x0d\x02\x1b\x88\x7a\xd4\xbd\x9d\xcc\x58\x04" 
    b"\x69\xf6\x3b\xca\x42\xe2\xfd\xc3\x3d\x39\xc5\xd0\x71\xe4\xc8\xb7" 
    b"\x3e\x3f\xc8\xe9\xca\xc9\x3f\x04\x4e\x1b\x79\xca\xa5\x61\xc2\xed" 
    b"\x1d\xa6\xda\x5a\xe9\x7f\x65\x8c\xbe\x12\x6e\xa4\x5b\x33\x2f\x84" 
    b"\x28\x9c\x1c\x88\x2d\xff\x07\xbf\xa6\xd7\x5a\x88\x86\xb0\x3f\xf6" 
    b"\x31\x5b\x11\x6d\xf5\x58\xeb\x58\x02\x9e\xb5\x9a\xb1\xff\x25\x9d" 
    b"\x8b\x4f\xb6\x0a\xf9\xea\x3e\x3f\x21\x09\x65\x21\x22\xfe\x3d\x4e" 
    b"\x11\x5b\x9e\x5a\x59\x8b\xdd\xd8\xce\xd6\xd9\x59\xd2\x1e\xfd\xef" 
    b"\x0d\x1b\xd9\x61\x7f\xd7\x2d\xad\x62\x09\xe5\x22\x63\xea\xc7\x31" 
    b"\xd9\xa1\x38\x80\x5c\xa7\x32\x82\xec\x1b\xa2\x49\x5a\x06\xd2\x7c" 
    b"\xc9\x96\x57\xbb\x17\x75\xfc\x7a\x8f\x0d\x77\xb5\x7a\x8e\x3e\xf4" 
    b"\xba\x2f\x69\x13\x26\xd6\xd9\x21\x60\x2f\x21\x3e\x87\xee\xfd\x87" 
)

_FIRMWARE_DATA_3 = (
    b"\x16\x0d\xc8\x08\x00\x25\x71\xac\x2c\x03\x2a\x37\x2d\xb3\x34\x09" 
    b"\x91\xe3\x06\x2c\x38\x37\x95\x3b\x17\x7a\xaf\xac\x99\x55\xab\x41" 
    b"\x39\x5f\x8e\xa6\x43\x80\x03\x88\x6f\x7d\xbd\x5a\xb4\x2b\x32\x23" 
    b"\x5a\xa9\x31\x32\x39\x4c\x5b\xf4\x6b\xaf\x66\x6f\x3c\x8e\x2d\x82" 
    b"\x97\x9f\x4a\x01\xdc\x99\x98\x00\xec\x38\x7a\x79\x70\xa6\x85\xd6" 
    b"\x21\x63\x0d\x45\x9a\x2e\x5e\xa7\xb1\xea\x66\x6a\xbc\x62\x2d\x7b" 
    b"\x7d\x85\xea\x95\x2f\xc0\xe8\x6f\x35\xa0\x3a\x02\x25\xbc\xb2\x5f" 
    b"\x5c\x43\x96\xcc\x26\xd2\x16\xb4\x96\x73\xd7\x13\xc7\xae\x53\x15" 
    b"\x31\x89\x68\x66\x6d\x2c\x92\x1f\xcc\x5b\xa7\x8f\x5d\xbb\xc9\xdb" 
    b"\xe8\x3b\x9d\x61\x74\x8b\x05\xa1\x58\x52\x68\xee\x3d\x39\x79\xa0" 
    b"\x9b\xdd\xe1\x55\xc9\x60\xeb\xad\xb8\x5b\xc2\x5a\xb5\x2c\x18\x55" 
    b"\xa9\x50\xc3\xf6\x72\x5f\xcc\xe2\xf4\x55\xb5\xd6\xb5\x4a\x99\xa5" 
    b"\x28\x74\x97\x18\xe8\xc0\x84\x89\x50\x03\x86\x4d\x1a\xb7\x09\x90" 
    b"\xa2\x01\x04\xbb\x73\x62\xcb\x97\x22\x70\x5d\x52\x41\x8e\xd9\x90" 
    b"\x15\xaa\xab\x0a\x31\x65\xb4\xda\xd0\xee\x24\xc9\x41\x91\x1e\xbc" 
    b"\x46\x70\x40\x9d\xda\x0e\x2a\xe4\xb2\x4c\x9f\xf2\xfc\xf3\x84\x17" 
)

_FIRMWARE_DATA_4 = (
    b"\x44\x1e\xd7\xca\x23\x1f\x3f\x5a\x22\x3d\xaf\x9b\x2d\xfc\x41\xad" 
    b"\x26\xb4\x45\x67\x0b\x80\x0e\xf9\x61\x37\xec\x3b\xf4\x4b\x14\xdf" 
    b"\x5a\x0c\x3a\x50\x0b\x14\x0c\x72\xae\xc6\xc5\xec\x35\x53\x2d\x59" 
    b"\xed\x91\x74\xe2\xc4\xc8\xf2\x25\x6b\x97\x6f\xc9\x76\xce\xa9\xb1" 
    b"\x99\x8f\x5a\x92\x3b\xc4\x8d\x54\x50\x40\x72\xd6\x90\x83\xfc\xe5" 
    b"\x49\x8b\x17\xf5\xfd\x6b\x8d\x32\x02\xe9\x0a\xfe\xbf\x00\x6b\xa3" 
    b"\xad\x5f\x09\x4b\x97\x2b\x00\x58\x65\x2e\x07\x49\x0a\x3b\x6b\x2e" 
    b"\x50\x6c\x1d\xac\xb7\x6a\x26\xd8\x13\xa4\xca\x16\xae\xab\x93\xb9" 
    b"\x1c\x1c\xb4\x47\x6a\x38\x36\x17\x27\xc9\x7f\xc7\x64\xcb\x89\x58" 
    b"\xc5\x61\xc2\xc6\xea\x15\x0b\x34\x0c\x5d\x61\x76\x6e\x2b\x62\x40" 
    b"\x92\xa3\x6c\xef\xf4\xe4\xc3\xa1\xa8\xf5\x94\x79\x0d\xd1\x3d\xcb" 
    b"\x3d\x40\xb6\xd0\xf0\x10\x54\xd8\x47\x25\x51\xc5\x41\x79\x00\xe5" 
    b"\xa0\x72\xde\xbb\x3b\x62\x17\xf6\xbc\x5d\x00\x76\x2e\xa7\x3b\xb6" 
    b"\xf1\x98\x72\x59\x2a\x73\xb0\x21\xd6\x49\xe0\xc0\xd5\xeb\x02\x7d" 
    b"\x4b\x41\x28\x70\x2d\xec\x2b\x71\x1f\x0b\xb9\x71\x63\x06\xe6\xbc" 
    b"\x60\xbb\xf4\x9a\x62\x43\x09\x18\x4e\x93\x06\x4d\x76\xfa\x7f\xbd" 
)

_FIRMWARE_DATA_5 = (
    b"\x02\xe4\x50\x91\x12\xe5\x86\xff\x64\x1e\xaf\x7e\xb3\xb2\xde\x89" 
    b"\xc1\xa2\x6f\x40\x7b\x41\x51\x63\xea\x25\xd1\x97\x57\x92\xa8\x45" 
    b"\xa1\xa5\x45\x21\x43\x7f\x83\x15\x29\xd0\x30\x53\x32\xb4\x5a\x17" 
    b"\x96\xbc\xc2\x68\xa9\xb7\xaf\xac\xdf\xf1\xe3\x89\xba\x24\x79\x54" 
    b"\xc6\x14\x07\x1c\x1e\x0d\x3a\x6b\xe5\x3d\x4e\x10\x60\x96\xec\x6c" 
    b"\xda\x47\xae\x03\x25\x39\x1d\x74\xc8\xac\x6a\xf2\x6b\x05\x2a\x9a" 
    b"\xe7\xe8\x92\xd6\xc2\x6d\xfa\xe8\xa7\x9d\x5f\x48\xc9\x75\xf1\x66" 
    b"\x6a\xdb\x5d\x9a\xcd\x27\xdd\xb9\x24\x04\x9c\x18\xc2\x6d\x0c\x91" 
    b"\x34\x48\x42\x6f\xe9\x59\x70\xc4\x7e\x81\x0e\x32\x0a\x93\x48\xb0" 
    b"\xc0\x15\x9e\x05\xac\x36\x16\xcb\x59\x65\xa0\x83\xdf\x3e\xda\xfb" 
    b"\x1d\x1a\xdb\x65\xec\x9a\xc6\xc3\x8e\x3c\x45\xfd\xc8\xf5\x1c\x6a" 
    b"\x67\x0d\x8f\x99\x7d\x30\x21\x8c\xea\x22\x87\x65\xc9\xb2\x4c\xe4" 
    b"\x1b\x46\xba\x54\xbd\x7c\xca\xd5\x8f\x5b\xa5\x01\x04\xd8\x0a\x16" 
    b"\xbf\xb9\x50\x2e\x37\x2f\x64\xf3\x70\x11\x02\x05\x31\x9b\xa0\xb2" 
    b"\x01\x5e\x4f\x19\xc9\xd4\xea\xa1\x79\x54\x53\xa7\xde\x2f\x49\xd3" 
    b"\xd1\x63\xb5\x03\x15\x4e\xbf\x04\xb3\x26\x8b\x20\xb2\x45\xcf\xcd" 
)

_FIRMWARE_DATA_6 = (
    b"\x5b\x82\x32\x88\x61\xa7\xa8\xb2\xa0\x72\x96\xc0\xdb\x2b\xe2\x5f" 
    b"\xba\xe3\xf5\x8a\xde\xf1\x18\x01\x16\x40\xd9\x86\x12\x09\x18\x1b" 
    b"\x05\x0c\xb1\xb5\x47\xe2\x43\xab\xfe\x92\x63\x7e\x95\x2b\xf0\xaf" 
    b"\xe1\xf1\xc3\x4a\xff\x2b\x09\xbb\x4a\x0e\x9a\xc4\xd8\x64\x7d\x83" 
    b"\xa0\x4f\x44\xdb\xc4\xa8\x58\xef\xfc\x9e\x77\xf9\xa6\x8f\x58\x8b" 
    b"\x12\xf4\xe9\x81\x12\x47\x51\x41\x83\xef\xf6\x73\xbc\x8e\x0f\x4c" 
    b"\x8f\x4e\x69\x90\x77\x29\x5d\x92\xb0\x6d\x06\x67\x29\x60\xbd\x4b" 
    b"\x17\xc8\x89\x69\x28\x29\xd6\x78\xcb\x11\x4c\xba\x8b\x68\xae\x7e" 
    b"\x9f\xef\x95\xda\xe2\x9e\x7f\xe9\x55\xe5\xe1\xe2\xb7\xe6\x5f\xbb" 
    b"\x2c\xa2\xe6\xee\xc7\x0a\x60\xa9\xd1\x80\xdf\x7f\xd6\x97\xab\x1d" 
    b"\x22\x25\xfc\x79\x23\xe0\xae\xc5\xef\x16\xa4\xa1\x0f\x92\xa9\xc7" 
    b"\xe3\x3a\x55\xdf\x62\x49\xd9\xf5\x84\x49\xc5\x90\x34\xd3\xe1\xac" 
    b"\x99\x21\xb1\x02\x76\x4a\xfa\xd4\xbb\xa4\x9c\xa2\xe2\xcb\x3d\x3b" 
    b"\x14\x75\x60\xd1\x02\xb4\xa3\xb4\x72\x06\xf9\x19\x9c\xe2\xe4\xa7" 
    b"\x0f\x25\x88\xc6\x86\xd6\x8c\x74\x4e\x6e\xfc\xa8\x48\x9e\xa7\x9d" 
    b"\x1a\x4b\x37\x09\xc8\xb0\x10\xbe\x6f\xfe\xa3\xc4\x7a\xb5\x3d\xe8" 
)

_FIRMWARE_DATA_7 = (
    b"\x30\xf1\x0d\xa0\xb2\x44\xfc\x9b\x8c\xf8\x61\xed\x81\xd1\x62\x11" 
    b"\xb4\xe1\xd5\x39\x52\x89\xd3\xa8\x49\x31\xdf\xb6\xf9\x91\xf4\x1c" 
    b"\x9d\x09\x95\x40\x56\xe7\xe3\xcd\x5c\x92\xc1\x1d\x6b\xe9\x78\x6f" 
    b"\x8e\x94\x42\x66\xa2\xaa\xd3\xc8\x2e\xe3\xf6\x07\x72\x0b\x6b\x1e" 
    b"\x7b\xb9\x7c\xe0\xa0\xbc\xd9\x25\xdf\x87\xa8\x5f\x9c\xcc\xf0\xdb" 
    b"\x42\x8e\x07\x31\x13\x01\x66\x32\xd1\xb8\xd6\xe3\x5e\x12\x76\x61" 
    b"\xd3\x38\x89\xe6\x17\x6f\xa5\xf2\x71\x0e\xa5\xe2\x88\x30\xbb\xbe" 
    b"\x8a\xea\xc7\x62\xc4\xcf\xb8\xcd\x33\x8d\x3d\x3e\xb5\x60\x3a\x03" 
    b"\x92\xe4\x6d\x1b\xe0\xb4\x84\x08\x55\x88\xa7\x3a\xb9\x3d\x43\xc3" 
    b"\xc0\xfa\x07\x6a\xca\x94\xad\x99\x55\xf1\xf1\xc0\x23\x87\x1d\x3d" 
    b"\x1c\xd1\x66\xa0\x57\x10\x52\xa2\x7f\xbe\xf9\x88\xb6\x02\xbf\x08" 
    b"\x23\xa9\x0c\x63\x17\x2a\xae\xf5\xf7\xb7\x21\x83\x92\x31\x23\x0d" 
    b"\x20\xc3\xc2\x05\x21\x62\x8e\x45\xe8\x14\xc1\xda\x75\xb8\xf8\x92" 
    b"\x01\xd0\x5d\x18\x9f\x99\x11\x19\xf5\x35\xe8\x7f\x20\x88\x8c\x05" 
    b"\x75\xf5\xd7\x40\x17\xbb\x1e\x36\x52\xd9\xa4\x9c\xc2\x9d\x42\x81" 
    b"\xd8\xc7\x8a\xe7\x4c\x81\xe0\xb7\x57\xed\x48\x8b\xf0\x97\x15\x61" 
)

_FIRMWARE_DATA_8 = (
    b"\xd9\x2c\x7c\x45\xaf\xc2\xcd\xfc\xaa\x13\xad\x59\xcc\xb2\xb2\x6e" 
    b"\xdd\x63\x9c\x32\x0f\xec\x83\xbe\x78\xac\x91\x44\x1a\x1f\xea\xfd" 
    b"\x5d\x8e\xb4\xc0\x84\xd4\xac\xb4\x87\x5f\xac\xef\xdf\xcd\x12\x56" 
    b"\xc8\xcd\xfe\xc5\xda\xd3\xc1\x69\xf3\x61\x05\xea\x25\xe2\x12\x05" 
    b"\x8f\x39\x08\x08\x7c\x37\xb6\x7e\x5b\xd8\xb1\x0e\xf2\xdb\x4b\xf1" 
    b"\xad\x90\x01\x57\xcd\xa0\xb4\x52\xe8\xf3\xd7\x8a\xbd\x4f\x9f\x21" 
    b"\x40\x72\xa4\xfc\x0b\x01\x2b\x2f\xb6\x4c\x95\x2d\x35\x33\x41\x6b" 
    b"\xa0\x93\xe7\x2c\xf2\xd3\x72\x8b\xf4\x4f\x15\x3c\xaf\xd6\x12\xde" 
    b"\x3f\x83\x3f\xff\xf8\x7f\xf6\xcc\xa6\x7f\xc9\x9a\x6e\x1f\xc1\x0c" 
    b"\xfb\xee\x9c\xe7\xaf\xc9\x26\x54\xef\xb0\x39\xef\xb2\xe9\x23\xc4" 
    b"\xef\xd1\xa1\xa4\x25\x24\x6f\x8d\x6a\xe5\x8a\x32\x3a\xaf\xfc\xda" 
    b"\xce\x18\x25\x42\x07\x4d\x45\x8b\xdf\x85\xcf\x55\xb2\x24\xfe\x9c" 
    b"\x69\x74\xa7\x6e\xa0\xce\xc0\x39\xf4\x86\xc6\x8d\xae\xb9\x48\x64" 
    b"\x13\x0b\x40\x81\xa2\xc9\xa8\x85\x51\xee\x9f\xcf\xa2\x8c\x19\x52" 
    b"\x48\xe2\xc1\xa8\x58\xb4\x10\x24\x06\x58\x51\xfc\xb9\x12\xec\xfd" 
    b"\x73\xb4\x6d\x84\xfa\x06\x8b\x05\x0b\x2d\xd6\xd6\x1f\x29\x82\x9f" 
)

_FIRMWARE_DATA_9 = (
    b"\x19\x12\x1e\xb2\x04\x8f\x7f\x4d\xbd\x30\x2e\xe3\xe0\x88\x29\xc5" 
    b"\x93\xd6\x6c\x1f\x29\x45\x91\xa7\x58\xcd\x05\x17\xd6\x6d\xb3\xca" 
    b"\x66\xcc\x3c\x4a\x74\xfd\x08\x10\xa6\x99\x92\x10\xd2\x85\xab\x6e" 
    b"\x1d\x0e\x8b\x26\x46\xd1\x6c\x84\xc0\x26\x43\x59\x68\xf0\x13\x1d" 
    b"\xfb\xe3\xd1\xd2\xb4\x71\x9e\xf2\x59\x6a\x33\x29\x79\xd2\xd7\x26" 
    b"\xf1\xae\x78\x9e\x1f\x0f\x3f\xe3\xe8\xd0\x27\x78\x77\xf6\xac\x9c" 
    b"\x56\x39\x73\x8a\x6b\x2f\x34\x78\xb1\x11\xdb\xa4\x5c\x80\x01\x71" 
    b"\x6a\xc2\xd1\x2e\x5e\x76\x28\x70\x93\xae\x3e\x78\xb0\x1f\x0f\xda" 
    b"\xbf\xfb\x8a\x67\x65\x4f\x91\xed\x49\x75\x78\x62\xa2\x93\xb5\x70" 
    b"\x7f\x4d\x08\x4e\x79\x61\xa8\x5f\x7f\xb4\x65\x9f\x91\x54\x3a\xe8" 
    b"\x50\x33\xd3\xd5\x8a\x7c\xf3\x9e\x8b\x77\x7b\xc6\xc6\x0c\x45\x95" 
    b"\x1f\xb0\xd0\x0b\x27\x4a\xfd\xc7\xf7\x0d\x5a\x43\xc9\x7d\x35\xb0" 
    b"\x7d\xc4\x9c\x57\x1e\x76\x0d\xf1\x95\x30\x71\xcc\xb3\x66\x3b\x63" 
    b"\xa8\x6c\xa3\x43\xa0\x24\xcc\xb7\x53\xfe\xfe\xbc\x6e\x60\x89\xaf" 
    b"\x16\x21\xc8\x91\x6a\x89\xce\x80\x2c\xf1\x59\xce\xc3\x60\x61\x3b" 
    b"\x0b\x19\xfe\x99\xac\x65\x90\x15\x12\x05\xac\x7e\xff\x98\x7b\x66" 
)

_FIRMWARE_DATA_10 = (
    b"\x64\x0e\x4b\x5b\xaa\x8d\x3b\xd2\x56\xcf\x99\x39\xee\x22\x81\xd0" 
    b"\x60\x06\x66\x20\x81\x48\x3c\x6f\x3a\x77\xba\xcb\x52\xac\x79\x56" 
    b"\xaf\xe9\x16\x17\x0a\xa3\x82\x08\xd5\x3c\x97\xcb\x09\xff\x7f\xf9" 
    b"\x4f\x60\x05\xb9\x53\x26\xaa\xb8\x50\xaa\x19\x25\xae\x5f\xea\x8a" 
    b"\xd0\x89\x12\x80\x43\x50\x24\x12\x21\x14\xcd\x77\xeb\x21\xcc\x5c" 
    b"\x09\x64\xf3\xc7\xcb\xc5\x4b\xc3\xe7\xed\xe7\x86\x2c\x1d\x8e\x19" 
    b"\x52\x9b\x2a\x0c\x18\x72\x0b\x1e\x1b\xb0\x0f\x42\x99\x04\xae\xd5" 
    b"\xb7\x89\x1a\xb9\x4f\xd6\xaf\xf3\xc9\x93\x6f\xb0\x60\x83\x6e\x6b" 
    b"\xd1\x5f\x3f\x1a\x83\x1e\x24\x00\x87\xb5\x3e\xdb\xf9\x4d\xa7\x16" 
    b"\x2e\x19\x5b\x8f\x1b\x0d\x47\x72\x42\xe9\x0a\x11\x08\x2d\x88\x1c" 
    b"\xbc\xc7\xb4\xbe\x29\x4d\x03\x5e\xec\xdf\xf3\x3d\x2f\xe8\x1d\x9a" 
    b"\xd2\xd1\xab\x41\x3d\x87\x11\x45\xb0\x0d\x46\xf5\xe8\x95\x62\x1c" 
    b"\x68\xf7\xa6\x5b\x39\x4e\xbf\x47\xba\x5d\x7f\xb7\x6a\xf4\xba\x1d" 
    b"\x69\xf6\xa4\xe7\xe4\x6b\x3b\x0d\x23\x16\x4a\xb2\x68\xf0\xb2\x0d" 
    b"\x09\x17\x6a\x63\x8c\x83\xd3\xbd\x05\xc9\xf6\xf0\xa1\x31\x0b\x2c" 
    b"\xac\x83\xac\x80\x34\x32\xb4\xec\xd0\xbc\x54\x82\x9a\xc8\xf6\xa0" 
)

_FIRMWARE_DATA_11 = (
    b"\x7d\xc6\x79\x73\xf4\x20\x99\xf3\xb4\x01\xde\x91\x27\xf2\xc0\xdc" 
    b"\x81\x00\x4e\x7e\x07\x99\xc8\x3a\x51\xbc\x38\xd6\x8a\xa2\xde\x3b" 
    b"\x6a\x8c\x1a\x7c\x81\x0f\x3a\x1f\xe4\x05\x7b\x20\x35\x6b\xa5\x6a" 
    b"\xa7\xe7\xbc\x9c\x20\xec\x00\x15\xe2\x51\xaf\x77\xeb\x29\x3c\x7d" 
    b"\x2e\x00\x5c\x81\x21\xfa\x35\x6f\x40\xef\xfb\xd1\x3f\xcc\x9d\x55" 
    b"\x53\xfb\x5a\xa5\x56\x89\x0b\x52\xeb\x57\x73\x4f\x1b\x67\x24\xcb" 
    b"\xb8\x6a\x10\x69\xd6\xfb\x52\x40\xff\x20\xa5\xf3\x72\xe1\x3d\xa4" 
    b"\x8c\x81\x66\x16\x0d\x5d\xad\xa8\x50\x25\x78\x31\x77\x0c\x57\xe4" 
    b"\xe9\x15\x2d\xdb\x07\x87\xc8\xb0\x43\xde\xfc\xfe\xa9\xeb\xf5\xb0" 
    b"\xd3\x7b\xe9\x1f\x6e\xca\xe4\x03\x95\xc5\xd1\x59\x72\x63\xf0\x86" 
    b"\x54\xe8\x16\x62\x0b\x35\x29\xc2\x68\xd0\xd6\x3e\x90\x60\x57\x1d" 
    b"\xc9\xed\x3f\xed\xb0\x2f\x7e\x97\x02\x51\xec\xee\x6f\x82\x74\x76" 
    b"\x7f\xfb\xd6\xc4\xc3\xdd\xe8\xb1\x60\xfc\xc6\xb9\x0d\x6a\x33\x78" 
    b"\xc6\xc1\xbf\x86\x2c\x50\xcc\x9a\x70\x8e\x7b\xec\xab\x95\xac\x53" 
    b"\xa0\x4b\x07\x88\xaf\x42\xed\x19\x8d\xf6\x32\x17\x48\x47\x1d\x41" 
    b"\x6f\xfe\x2e\xa7\x8f\x4b\xa0\x51\xf3\xbf\x02\x0a\x48\x58\xf7\xa1" 
)

_FIRMWARE_DATA_12 = (
    b"\x6d\xea\xa5\x13\x5a\x5b\xea\x0c\x9e\x52\x4f\x9e\xb9\x71\x7f\x23" 
    b"\x83\xda\x1b\x86\x9a\x41\x29\xda\x70\xe7\x64\xa1\x7b\xd5\x0a\x22" 
    b"\x0d\x5c\x40\xc4\x81\x07\x25\x35\x4a\x1c\x10\xdb\x45\x0a\xff\x36" 
    b"\xd4\xe0\xeb\x5f\x68\xd6\x67\xc6\xd0\x8b\x76\x1a\x7d\x59\x42\xa1" 
    b"\xcb\x96\x4d\x84\x09\x9a\x3d\xe0\x52\x85\x6e\x48\x90\x85\x2a\x63" 
    b"\xb2\x69\xd2\x00\x43\x31\x37\xb3\x52\xaf\x62\xfa\xc1\xe0\x03\xfb" 
    b"\x62\xaa\x88\xc9\xb2\x2c\xd5\xa8\xf5\xa5\x4c\x12\x59\x4e\x06\x5e" 
    b"\x9b\x15\x66\x11\xb2\x27\x92\xdc\x98\x59\xde\xdf\xfa\x9a\x32\x2e" 
    b"\xc0\x5d\x3c\x33\x41\x6d\xaf\xb2\x25\x23\x14\xa5\x7b\xc7\x9b\x68" 
    b"\xf3\xda\xeb\xe3\xa9\xe2\x6f\x0e\x1d\x1c\xba\x55\xb6\x34\x6a\x93" 
    b"\x1f\x1f\xb8\x34\xc8\x84\x08\xb1\x6b\x6a\x28\x74\x74\xe5\xeb\x75" 
    b"\xe9\x7c\xd8\xba\xd8\x42\xa5\xee\x1f\x80\xd9\x96\xb2\x2e\xe7\xbf" 
    b"\xba\xeb\xd1\x69\xbb\x8f\xfd\x5a\x63\x8f\x39\x7f\xdf\x1d\x37\xd2" 
    b"\x18\x35\x9d\xb6\xcc\xe4\x27\x81\x89\x38\x38\x68\x33\xe7\x78\xd8" 
    b"\x76\xf5\xee\xd0\x4a\x07\x69\x19\x7a\xad\x18\xb1\x94\x61\x45\x53" 
    b"\xa2\x48\xda\x96\x4a\xf9\xee\x94\x2a\x1f\x6e\x18\x3c\x92\x46\xd1" 
)

_FIRMWARE_DATA_13 = (
    b"\x1a\x28\x18\x32\x1f\x3a\x45\xbe\x04\x35\x92\xe5\xa3\xcb\xb5\x2e" 
    b"\x32\x43\xac\x65\x17\x89\x99\x15\x03\x9e\xb1\x23\x2f\xed\x76\x4d" 
    b"\xd8\xac\x21\x40\xc4\x99\x4e\x65\x71\x2c\xb3\x45\xab\xfb\xe7\x72" 
    b"\x39\x56\x30\x6d\xfb\x74\xeb\x99\xf3\xcd\x57\x5c\x78\x75\xe9\x8d" 
    b"\xc3\xa2\xfb\x5d\xe0\x90\xc5\x55\xad\x91\x53\x4e\x9e\xbd\x8c\x49" 
    b"\xa4\xa4\x69\x10\x0c\xc5\x76\xe9\x25\x86\x8d\x66\x23\xa8\xdb\x5c" 
    b"\xe8\xd9\x30\xe1\x15\x7b\xc0\x99\x0f\x03\xec\xaa\x12\xef\xce\xd4" 
    b"\xea\x55\x5c\x08\x86\xf4\xf4\xb0\x83\x42\x95\x37\xb6\x38\xe0\x2b" 
    b"\x54\x89\xbd\x4e\x20\x9d\x3f\xc3\x4b\xb7\xec\xfa\x5a\x14\x03\xcb" 
    b"\x64\xc8\x34\x4a\x4b\x6e\xf8\x6e\x56\xf6\xdd\x5f\xa1\x24\xe2\xd4" 
    b"\xd0\x82\x64\x1f\x8e\x9b\xfa\xb4\xcb\xdb\x0a\xe8\x15\xfc\x15\xab" 
    b"\x4b\x18\xbf\xd4\x42\x14\x48\x82\x85\xdd\xeb\x49\x1b\x0b\x0b\x05" 
    b"\xe9\xb4\xa1\x33\x0a\x5d\x0e\x6c\x4b\xc0\xd6\x6c\x7c\xfb\x69\x0b" 
    b"\x53\x19\xe4\xf3\x35\xfc\xbe\xa1\x34\x02\x09\x4f\x74\x86\x92\xcd" 
    b"\x5d\x1a\xc1\x27\x0c\xf2\xc5\xcf\xdd\x23\x93\x02\xbd\x41\x5e\x42" 
    b"\xf0\xa0\x9d\x0c\x72\xc8\xec\x32\x0a\x8a\xfd\x3d\x5a\x41\x27\x0c" 
)

_FIRMWARE_DATA_14 = (
    b"\x88\x59\xad\x94\x2e\xef\x5d\x8f\xc7\xdf\x66\xe4\xdd\x56\x6c\x7b" 
    b"\xca\x55\x81\xae\xae\x5c\x1b\x1a\xab\xae\x99\x8d\xcc\x42\x97\x59" 
    b"\xf4\x14\x3f\x75\xc6\xd1\x88\xba\xaa\x84\x4a\xd0\x34\x08\x3b\x7d" 
    b"\xdb\x15\x06\xb0\x5c\xbd\x40\xf5\xa8\xec\xae\x36\x40\xdd\x90\x1c" 
    b"\x3e\x0d\x7e\x73\xc7\xc2\xc5\x6a\xff\x52\x05\x7f\xbe\xd0\x92\xfd" 
    b"\xb3\x6f\xff\x5d\xb7\x97\x64\x73\x7b\xca\xd1\x98\x24\x6b\x0b\x01" 
    b"\x68\xdd\x27\x85\x85\xb5\x83\xc1\xe0\x50\x64\xc7\xaf\xf1\xc6\x4d" 
    b"\xb1\xef\xc9\xb4\x0a\x6d\x65\xf3\x47\xcc\xa3\x02\x21\x0c\xbe\x22" 
    b"\x29\x05\xcf\x5f\xe8\x94\x6c\xe5\xdc\xc4\xdf\xbe\x3e\xa8\xb4\x18" 
    b"\xb0\x99\xb8\x6f\xff\x5d\xb9\xfd\x3b\x5d\x16\xbf\x3e\xd8\xb3\xd8" 
    b"\x08\x34\xf6\x47\x35\x5b\x72\x1a\x33\xad\x52\x5d\xb8\xd0\x77\xc6" 
    b"\xab\xba\x55\x09\x5f\x02\xf8\xd4\x5f\x53\x06\x91\xcd\x74\x42\xae" 
    b"\x54\x91\x81\x62\x13\x6f\xd8\xa9\x77\xc3\x6c\xcb\xf1\x29\x5a\xcc" 
    b"\xda\x35\xbd\x52\x23\xbe\x59\xeb\x12\x6d\xb7\x53\xee\xfc\xb4\x1b" 
    b"\x13\x5e\xba\x16\x7c\xc5\xf3\xe3\x6d\x07\x78\xf5\x2b\x21\x05\x88" 
    b"\x4c\xc0\xa1\xe3\x36\x10\xf8\x1b\xd8\x17\xfb\x6a\x4e\xd8\xb3\x47" 
)

_FIRMWARE_DATA_15 = (
    b"\x2d\x99\xbd\xbb\x5d\x37\x7d\xba\xf1\xe1\x7c\xc0\xc5\x54\x62\x7f" 
    b"\xcf\x5a\x4a\x93\xcc\xf1\x1b\x34\xc8\xa6\x05\x4c\x55\x8b\x54\x84" 
    b"\xd5\x77\xeb\xc0\x6d\x3a\x29\xbd\x75\x61\x09\x9a\x2c\xbb\xf7\x18" 
    b"\x79\x34\x90\x24\xa5\x81\x70\x87\xc5\x02\x7c\xba\xd4\x5e\x14\x8e" 
    b"\xe4\xed\xa2\x61\x6a\xb9\x6e\xb5\x4a\xb9\x01\x46\xf4\xcf\xbc\x09" 
    b"\x2f\x27\x4b\xbd\x86\x7a\x10\xe1\xd4\xc8\xd9\x20\x8d\x8a\x63\x00" 
    b"\x63\x44\xeb\x54\x0b\x75\x49\x10\xa2\xa7\xad\xb9\xd1\x01\x80\x63" 
    b"\x25\xc8\x12\xa6\xce\x1e\xbe\xfe\x7e\x5f\x3c\xdb\x34\xea\x37\xec" 
    b"\x3b\xd5\x28\xd2\x07\x8c\x9a\xb6\xee\x5e\x3e\xdf\x1d\x99\xb0\xe2" 
    b"\x46\xef\x5c\x1b\xb4\xea\x56\x2e\xde\x1f\x9d\xb8\xd3\x24\xab\xd4" 
    b"\x2a\xd6\x2e\xde\x1f\x9d\xb8\xf2\x66\x2f\xbd\xf8\x72\x66\x4e\x1e" 
    b"\x9f\x9d\xb8\xf2\x47\x0c\x9a\xb6\xee\x3f\xfc\x7a\x57\x0d\x79\x70" 
    b"\x62\x27\xad\xb9\xd1\x01\x61\x40\x02\x67\x2d\xd8\x32\xe6\x2f\xdc" 
    b"\x3a\xd7\x2c\xbb\xf4\x4b\xf5\x49\xf1\x60\x23\xc4\x0a\x77\x4d\xf9" 
    b"\x51\x01\x80\x63\x25\xa9\xb1\xe0\x42\xe7\x4c\x1a\x97\xac\xbb\xf4" 
    b"\x6a\x37\xcd\x18\xb2\xe6\x2f\xdc\x1b\x95\xa8\xd2\x07\x6d\x58\x32" 
)

_FIRMWARE_DATA_16 = (
    b"\xe6\x4e\x1e\x9f\xbc\xfa\x57\x0d\x79\x51\x20\xc2\x06\x6f\x5c\x1b" 
    b"\x95\xa8\xb3\xc5\xe9\x31\xe0\x23\xc4\x0a\x77\x4d\x18\x93\x85\x69" 
    b"\x31\xc1\xe1\x21\xc0\xe3\x44\x0a\x77\x6c\x5a\x17\x8d\x98\x93\xa4" 
    b"\xab\xd4\x2a\xb7\xec\x5a\x17\xac\xbb\xf4\x4b\x14\xaa\xb7\xec\x3b" 
    b"\xd5\x28\xb3\xc5\xe9\x31\xc1\x00\x82\x67\x4c\xfb\x55\x28\xd2\x26" 
    b"\xaf\xbd\xd9\x11\x81\x61\x21\xa1\xa1\xc0\x02\x86\x6f\x5c\x1b\xb4" 
    b"\xcb\x14\x8b\x94\xaa\xd6\x2e\xbf\xdd\x19\xb0\xe2\x46\x0e\x7f\x7c" 
    b"\x5b\x15\x89\x90\x83\x84\x6b\x54\x0b\x75\x68\x52\x07\x6d\x58\x32" 
    b"\xc7\xed\x58\x32\xc7\xed\x58\x32\xe6\x4e\xff\x7c\x7a\x76\x6e\x3f" 
    b"\xdd\x38\xd3\x05\x88\x92\xa6\xaf\xdc\x1b\xb4\xcb\xf5\x68\x52\x07" 
    b"\x8c\x7b\x55\x09\x90\x83\x84\x6b\x54\x2a\xb7\xec\x3b\xd5\x09\x90" 
    b"\xa2\xc6\x0e\x7f\x7c\x7a\x57\x0d\x98\xb2\xc7\xed\x58\x32\xc7\x0c" 
    b"\x7b\x74\x4b\x14\x8b\x94\xaa\xb7\xcd\x18\x93\xa4\xca\x16\xae\xbf" 
    b"\xdd\x19\xb0\xe2\x46\x0e\x7f\x5d\x19\x91\x81\x80\x63\x44\xeb\x35" 
    b"\xc9\x10\x83\x65\x48\x12\xa6\xce\x1e\x9f\xbc\xdb\x15\x89\x71\x60" 
    b"\x23\xc4\xeb\x54\x2a\xb7\xec\x5a\x36\xcf\x81\x10\xac\x74"
)

_FIRMWARE_DATA = (
    _FIRMWARE_DATA_1,
    _FIRMWARE_DATA_2,
    _FIRMWARE_DATA_3,
    _FIRMWARE_DATA_4,
    _FIRMWARE_DATA_5,
    _FIRMWARE_DATA_6,
    _FIRMWARE_DATA_7,
    _FIRMWARE_DATA_8,
    _FIRMWARE_DATA_9,
    _FIRMWARE_DATA_10,
    _FIRMWARE_DATA_11,
    _FIRMWARE_DATA_12,
    _FIRMWARE_DATA_13,
    _FIRMWARE_DATA_14,
    _FIRMWARE_DATA_15,
    _FIRMWARE_DATA_16,
)


class PMW3389:

    def __init__(self, sck, mosi, miso, cs) -> None:
        """Initiate SPI pins, and set burst variables"""
        self.spi = busio.SPI(sck, mosi, miso)  # busio.SPI(clock=board.GP2, MOSI=board.GP3, MISO=board.GP4)
        
        self.cs_pin = DigitalInOut(cs)

        self.in_burst = False
        self.last_burst = 0

        # SPI Mode 3
        self.device = SPIDevice(
            self.spi, self.cs_pin, baudrate=8000000, polarity=1, phase=1
        )

    def begin(self, cpi=800):
        # Shutdown first
        self.write_reg(_REG_Shutdown, 0xB6)
        self.delay_ms(300)

        # Force reset
        self.write_reg(_REG_Power_Up_Reset, 0x5A)

        # Read registers 0x02 to 0x06 (and discard the data)
        self.read_reg(_REG_Motion)
        self.read_reg(_REG_Delta_X_L)
        self.read_reg(_REG_Delta_X_H)
        self.read_reg(_REG_Delta_Y_L)
        self.read_reg(_REG_Delta_Y_H)

        # Upload the firmware
        self.upload_firmware()
        self.delay_ms(10)

        # Set default CPI unless specified
        self.set_CPI(cpi)

        return self.check_signature()

    def upload_firmware(self):
        """ The sensor still works as a regular mouse
        even if the firmware is not uploaded."""
        self.write_reg(_REG_Config2, 0x00)  # disable Rest mode
        self.write_reg(_REG_SROM_Enable, 0x1D)  # for initializing
        
        # Wait for more than one frame period.
        # Assume that the frame rate is as low as 100fps... even if it should never be that low
        self.delay_ms(10)
        
        self.write_reg(_REG_SROM_Enable, 0x18)  # start SROM download

        # send all bytes of the firmware
        with self.device as spi:
            spi.write(bytes([_REG_SROM_Load_Burst | 0x80]))
            for data_block in _FIRMWARE_DATA:
                for data_byte in data_block:
                    spi.write(data_byte)

        self.read_reg(_REG_SROM_ID)  # verify the ID before any other register reads or writes.
        
        # Write 0x00 (rest disable) to Config2 register for wired mouse
        # or 0x20 for wireless mouse design.
        self.write_reg(_REG_Config2, 0x00)

    def constrain(self, val, min_val, max_val) -> int:
        return min(max_val, max(min_val, val))

    def get_CPI(self) -> int:
        """CPI = (cpival + 1)*100"""
        cpival_high = self.read_reg(REG_Resolution_H)
        cpival_low = self.read_reg(REG_Resolution_L)
        cpival = cpival_high << 8 | cpival_low

        return (cpival + 1) * _PMW33XX_CPI_STEP

    def set_CPI(self, cpi) -> None:
        """Set CPI value. Default from init is 800

        :param int cpi: Counts per inch."""
        cpi_constrained = self.constrain(cpi, _PMW33XX_CPI_MIN, _PMW33XX_CPI_MAX)
        cpival = int(cpi_constrained / _PMW33XX_CPI_STEP) - 1

        # Sometimes doesn't work the first time around. Keep sending until it does.
        while self.get_CPI() != cpi:
            # Sets upper byte first for more consistent setting of cpi
            self.write_reg(_REG_Resolution_H, (cpival >> 8) & 0xFF);
            self.write_reg(_REG_Resolution_L, cpival & 0xFF);

    def delay_ms(self, delaytime):
        time.sleep(delaytime / 1000)

    def write_reg(self, reg_addr, data):
        if reg_addr != _REG_Motion_Burst:
            self.in_burst = False

        with self.device as spi:
            # Send address of the register, with MSBit = 1 to indicate it's a write
            spi.write(bytes([reg_addr | 0x80]))
            spi.write(bytes([data]))

    def read_reg(self, reg_addr):
        if reg_addr != _REG_Motion_Burst:
            self.in_burst = False

        with self.device as spi:
            # Send address of the register, with MSBit = 0 to indicate it's a read
            spi.write(bytes([reg_addr & 0x7F]))
            result = bytearray(1)
            spi.readinto(result)

        return result[0]  # convert -> int

    def check_signature(self):
        pid = self.read_reg(_REG_Product_ID)
        iv_pid = self.read_reg(_REG_Inverse_Product_ID)
        SROM_ver = self.read_reg(_REG_SROM_ID)
        print(f'signature: pid={pid}, iv_pid={iv_pid}, SROM_ver={SROM_ver}')

        return pid == 66 and iv_pid == 189 and SROM_ver == 4

    def read_burst(self):
        from_last = time.monotonic() - self.last_burst

        if not self.in_burst or from_last > 500:
            self.write_reg(_REG_Motion_Burst, 0x00)
            self.in_burst = True

        with self.device as spi:
            spi.write(bytes([_REG_Motion_Burst]))
            burst_buffer = bytearray(12)
            # Read burst buffer
            spi.readinto(burst_buffer)

        # Panic recovery, sometimes burst mode works weird
        if burst_buffer[0] and 0b111:
            self.in_burst = False

        self.last_burst = time.monotonic()

        motion = (burst_buffer[0] & 0x80) != 0
        surface = (burst_buffer[0] & 0x08) == 0  # 0 if on surface / 1 if off surface

        xl = burst_buffer[2]  # dx LSB
        xh = burst_buffer[3]  # dx MSB
        yl = burst_buffer[4]  # dy LSB
        yh = burst_buffer[5]  # dy MSB
        sl = burst_buffer[10]  # shutter LSB
        sh = burst_buffer[11]  # shutter MSB

        x = xh << 8 | xl
        y = yh << 8 | yl
        shutter = sh << 8 | sl

        # True if a motion is detected.
        is_motion = motion
        # True when a chip is on a surface
        is_on_surface = surface
        # displacement on x directions. Unit: Count. (CPI * Count = Inch value)
        dx = x
        # displacement on y directions.
        dy = y
        # Surface Quality register, max 0x80. Number of features on the surface = SQUAL * 8
        SQUAL = burst_buffer[6]
        # Reports the upper byte of an 18‐bit counter
        # which sums all 1296 raw data in the current frame
        # * Avg value = Raw_Data_Sum * 1024 / 1296
        raw_data_sum = burst_buffer[7]
        # Max raw data value in current frame, max=127
        max_raw_data = burst_buffer[8]
        # Min raw data value in current frame, max=127
        min_raw_data = burst_buffer[9]
        # unit: clock cycles of the internal oscillator.
        # shutter is adjusted to keep the average raw data values within normal operating ranges.
        shutter_data = shutter

        # Create dictionary and return it
        data = {
            "is_motion": is_motion,
            "is_on_surface": is_on_surface,
            "dx": dx,
            "dy": dy,
            "SQUAL": SQUAL,
            "raw_data_sum": raw_data_sum,
            "max_raw_data": max_raw_data,
            "min_raw_data": min_raw_data,
            "shutter_data": shutter_data,
        }

        return data
